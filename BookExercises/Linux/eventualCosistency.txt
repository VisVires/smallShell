Microsoft Paper 
Understanding Eventual Consistency:
    NOT ESPCECIALLY USEFUL
Amazon Paper
    - CAP Thereom - in distributed systems network partitions are a given so either Availability or Consistency must be relaxed
    - Client Side Consistency 
        - Four components:
            Storage System
            Process A - process that reads and writes to file system
            Process B & C - two processes that write to and read from the storage system, both independent and need to communicate and share info
        - Strong consistency - after an updaye completed access will return the updated value
        - Weak Consistency - System does not guarantee that subsequent accesses will return the updated value
            - certain conditions must be met before the value will be returned (normally time)
            - period between update and consistency is dubbed the inconsistency window
        - Eventual Consistency - system guarantee that if no new updates are made to the object eventually (after inconsistency windwo) all accesses will return the last updated value. 
            - DNS uses this
            - Updates to a name are distributed according to a configured pattern and in combination with time controlled caches, eventually a client will see the update

    - Variations on the eventual consistency model
        - Casual Consistency - If process A has communicated to B that it has updated an item a subsequent access by B will return the updted value and a write will supersede the earlier write
        - Read-your-writes consistency - Process A after it has updated an item always accesses the updated and will never see the older
        - Session Consistency - As long as a session exists the system guarantees read- your write consistency. If the session terminates a new session needs to be created and guarantees do not overlap
        - Monotonic read consistency - if a procss has seen a value for the object any subsequent accesses will never return any previous values
        - Monotonic write consistency - system guarantees to serialize the writes by the same process. 
    - Server Side Consistency
        N - number of nodes that store a replica of the data
        W - number of replicas that need to acknowledge the receipt of the update before the update completes
        R - number of replicas that are contacted when a data object is accessed through a read operation
        -- if W + R > N ...one can guarantee strong consistency
        -- R = 1 and N = W ...optimize for read case
        -- W = 1 and R = N ... optimize for a fast write..but durability is not guaranteed and if W < (N+1)/2 then there is a possiblity of conflicts
        -- W + R < N ...means weak/eventual consistency...there is no overlap in the read/write set 
            - Doesn't make sense to have R anything other than 1
        -- if W+R <= N then system is vulnerable to reading from nodes that have yet to recieve updates

Summary!! -
    Inconsitency can be tolerated because:
        - it improves read/write performance under highly concurrent conditions
        - handling partitions cases where a majority model would render part of the system unavailable
    Whether it is acceptable depends on the client application
        - A website scenario where we can have the notion of user-perceiced consistency
            - inconsistency window needs to be smaller than time expected for customer to return for the next page load
            - allows for updates to propagate before next read is expected
