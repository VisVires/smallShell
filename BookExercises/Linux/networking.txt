How to send a request to google.com
1. Client Application Layer - Access HTTP call - creates MESSAGE
    a. defines type of message (response, request), syntax (fields), semantics, rules for processes to send recieve
    b. Application process uses a socket to send/receive messages to/from another application process
    c. REQUEST message includes
        i. request line with:
            1. Method (GET, POST, PUT, DELETE etc)
            2. URL (includes input if GET)
            3. version
        ii. header lines
            1. header field name
            2. header value
            3. cookie header line
        iii. body
            1. entity body (includes input if PUT)
   e. If IP is not known? (DNS is application layer)
        i. Client queries root "name server" to find .com DNS server
        ii. Client queries .com DNS server to get amazon.com DNS
        iii. Client queries amazon.com DNS server to get IP address for amazon.com
        iv. DNS is UDP
2. Client Transport Layer - Access Port 80 - Creates SEGMENT from MESSAGE
    a. Process communication layer
    b. Handshake over HTTP 
        i . client initiates TCP connection to server using socket on port 80 by sending SYN and chooses initial sequence number x SYN bit = 1 Seq# = x
        ii. server accepts TCP connection by sending SYN-ACK SYN bit = 1, Seq#=y ACK bit = 1 ACK# = x + 1
        iii. Client recieves SYNACK(x+1) then sends ACK to acknowledge connection request ACK = 1 and ACK#= y+1         
        iv. Server receives ACK(y+1) and HTTP messages exchanged between server and client
            1. If persistent multiple items sent, else at most 1 item and multiple mean multiple connections
        v. TCP connection closed
    c. SENDER protocol
        i. accept message from application socket (OS controlled interface (a "door"))
        ii. break message into data blocks .. segments with sequence numbers 
            1. sequence # is byte-stream number of the FIRST BYTE OF THE SENT SEGMENT
        iii. encapsulates blocks into segments
        iv. start countdown timer then pass segments/address to network layer
        v. if ACK is received check if it includes previously unACK'ed segments
            1. Update known ACK'ed or restart times if there are outstanding segments
            2. ACK's are cumulative. ACK# is always the NUMBER OF THE NEXT BYTE EXPECTED BY RECIEVER
            3. Sender can have up to "window sized" un-ACKed packets and maintains timer for each un-ACK'ed packet
            4. if 3 ACKs for the same data then assumption is data is lost and data is resent
    d. Mulitplexing
        i. gathers data from multiple sockets, creates segments, encapsulates with header
    e. UDP data block includes destination IP and port number
        i. Reliable Data Transfer Components
            1. Also includes length and checksum
                a. Checksum is one's-complement sum of segment content
    f. TCP data block includes Source & destination IP and Source & Destination Port
        1. TCP Overview
            i. Connection Oriented
            ii. full duplex one sender one reciever
            iii. in-order byte stream
                1. cumulative byte count
                2. ack of bytes received
            iv. pipelined (flow control and send/receive buffer)
            v. flow controlled
                1. Maximum Segment Size (MSS)
                2. Sender cannot overwhelm receiver because it limits unACKed data to receive window
        2. TCP includes:
            i. SEQ number
            ii. ACK number
            iii. flags for urgent, ACK valid, push, reset, synch, final
            iv. Receive window (# of bytes willing)
            v. checksum
        3. Sender keeps copy of each segment until ACK by receiver and has ACK number (bogus if no ACK necessary)
        4. Sets a countdown timer for each segment sent
            i. if time expires re-send
            ii. if segment error ACK will never arrive
        5. Pipelined control will speed process up, receive side will have buffer
    g. Congestion control handled by the CongWin (sender's window size) Adaptive transmission algorithm
        i. Additive-increase, multiplicative decrease (AIMD)
            1. Additive Increase: increase CongWin by 1 MSS every RTT until loss
            2. Multiplicative Decrease: decrease CongWin in half after loss
    h. Closing a connection
        i. Client sends FIN bit = 1 Seq# = x, can no longer send but can receive
        ii. Server sends ACK and can still send data ACK bit = 1, ACK#= x+1
        iii. Client waits for server close
        iv. Server sends FIN bit = 1 Seq# = y and can no longer send data
        v. Client sends ACK bit = 1 ACK#= y+1
        vi. Server is closed
3. Client Network Layer - Create DATAGRAM from SEGMENT - creates datagram 20 bytes TCP/UDP and 20 bytes IP Overhead per datagram
    a. Logical communication from host to host
    b. Routing and Forwarding happens here
        i. Routing algorithm determines the path through the network 
        ii. forwarding table determines local forwarding 
    c. Can be sent over virtual-circuit network (connection service) or datagram network (connectionless)
        i. VC network steps
            1. Call setup for each packet
            2. VC identity in each packet (not destination host)
            3. Maintain state for each VC in every router from source to destination
        ii. Datagram network steps
            1. No call setup
            2. No state of end-to-end connections is kept in routers
            3. Packets forwarded using DESTINATION HOST ADDRESS
    d. Forwarding Table lists range of addresses
        i. IP has 4 billion entries so each destination range has a specific output link
            1. uses longest prefix match to determine route
                example: if prefix is 
                11001000 00010111 00011000 is interface 0
                11001000 00010111 00010    is interface 1
                11001000 00010111 00011    is interface 2
                other                      is interface 3
                Then 200.23.25.155 or 11001000 00010111 00011001 10011011 will go to interface 2
    e. IP is the network layer protocol
        i. Accepts transport layer TCP/UDP segments then encapuslates into datagram with source and destination address
        ii. Includes:
            1. IP version
            2. Header length (number of 32-bit lines)
            3. Service type (senders preference low latency, high reliability)
            4. Length (total bytes)
            5. IDENT, FLAGS, FRAG OFFSET
                a. ident can be session or sequence
            6. TTL
            7. UPPER LAYER (TCP/UDP)
            8. HEADER CHECKSUM
            9. SOURCE IP
            10. DESTINATION IP - Always the ultimate destination with address mask /x
                a. address mask defines how much of address is used to id network
            11. OPTIONS in mulitples of 32 bits (if none HEAD LEN = 5)
        iii. Routing Information
            1. Router uses address mask to destination address to get network address
            2. Routing table relates this to next-hop address
            3. Router forwards to next-hop address
    f. DHCP assignment
        i. New host broadcasts 'DHCP discover' w/ MAC address
        ii. DHCP Server responds to MAC address with 'DHCP offer'
        iii. Host requests IP 'DHCP Request'
        iv. DHCP server sends IP with network address and host number 'DHCP Acknowledgement'
        v. DHCP returns first-hop address of client, and name and IP of DNS server plus netmask
    g. Route decided by Djikstra's Algorithm or Link-State Algorithm
    h. Each piece of hardware has a MAximum Transmission Unit (MTU) smallest MTU on path determines size
        i. If MTU downstream is smaller than datagram then it is FRAGMENTED
            1. each fragment an independent datagram
            2. includes all headers and has identifier of original datagram
            3. 3 bit flag indicates if it is a fragment
            4. Fragment offset field gives order
    i. ICMP and Error Detection if error control message sent back to source
        i. CheckSum
        ii. TTL expire
        iii. No route
    j. Network Address Translation (NAT)
        i. In-line configuration...all entering or leaving info goes through the NAT device, internal doesn't use NAT
        ii. NAT device uses port number as well as IP, so Transport layer functionality needed
4. Client Link Layer - create FRAME from DATAGRAM
    a. Logical communication between adjacent nodes(hosts and routers/switches)
        i. Each host has network adaptor (NIC network interface controller)
            1. interface to physical layer
            2. has some network/transport layer functions like checksum processing and direct memory access
        ii. Sender...
            1. encapsulates datagram in hardware frame between delimiters
            2. adds address info, error, checking bits, reliable data transfer, flow control
        iii. Types of links
            1. point to point
                a. between host and swtich
            2. broadcast
                a. Mulitple Access Protocol - three classes
                    i. Channel partitioning (divide channel into smaller pieces (TDM && FDM)
                    ii. Random Access (allow collisions and recover)
                        1. when collision do delayed retransmission
                        2. Carrier Sense Multiple Access (CSMA)
                            a. Carrier Sense Multiple Access with Collision Detection (CSMA/CD) - Wired LAN (CD difficult in wireless)
                            b. Carrier Sense Multiple Access with Collision Avoidance (CSMA/CA) - wireless
                                i. reservation messages sent to receiver
        
                    iii. Taking Turns 
                        1. master node invites slaves nodes to transmit in turn (used for dumb terminals)
    b. Provides hardware addresses to identify source and destination
        i. Media Access Control (MAC) address 48 bit unique to manufacturer and NIC, portable
            1. A encapsulates B's MAC in frame
            2. A sends frame into the medium
            3. All nodes' NIC check frame to check if its for them
            4. Only B accepts frame
        ii. ARP (Address Resolution Protocol)
            1. Each node has ARP table and A looks up in B's MAC in ARP if A knows B's IP
            2. If in separate LAN then routes to Router and router will know it
    c. Has Access to shared medium
        i. Ethernet frames include
            1. preamble - synch receiver/sender clock rates 8-bytes
            2. destination address - 6 bytes for each MAC
            3. source address - 6 bytes
            4. type - network layer protocol (normally IP)
            5. payload - network layer datagram
            6. CRC - cyclic redundancy check at receiver (error checking)
        ii. Classified by topology
            1. bus (CSMA/CD)
            2. ring 
            3. star - most common (CSMA/CD) - active switch in center
    d. detect/avoid/resolve collisions at Adjacent nodes
        i. exponential backoff with CSMA/CD waits k*512 bit times
        ii. CSMA/CD - NIC only sends if channel idle then sends entire frame if collision then backoff
        iii. CSMA/CA - sender sends request to sent (RTS) AP send clear to send (CTS) which is received by all nodes
            1. if collision all requests lost then random backoff and retry
    e. Detect/correct bit level errors
        i. Done with 1-dimensional/ 2-dimensional even parity check
        ii. Checksum
        iii. Cyclic redundancy check (CRC)
        iv. Hamming codes
5. Client Physical Layer- Carries message to router
6. Router Physical Layer
7. Router Link Layer
8. Router Network Layer
9. Router Link Layer
10. Router Network Layer
11. Router Physical layer
12. Switch Physcial Layer
13. Switch Link Layer
14. Switch Physical Layer
15. Server Physical Layer
16. Server Link Layer - Receive FRAME and check data integrity -dencapsulate to make DATAGRAM
    a. checks address
        i. accepts if a match and handles errors, data transfer, flow control
        ii. otherwise reject
    b. Interprets and discards soh (start of header) (start delimiter)
    c. Re-assembles fragments (ONLY OCCURS AT FINAL DESTINATION)
        i. can arrive out of order and get sorted
        ii. fragment loss can happen
        ii. destination sets timer with first fragment if it expires destination drops datagram
    d. interprets/discards eot (end of text) (end delimiter)
17. Server Network Layer - Checks IP against own IP and makes sure destination is correct- de-encapsulates DATAGRAM to make SEGMENT
18. Server Transport Layer - Checks the UDP or TCP port number and makes connection to port based on that - deencapsulates SEGMENT and sends MESSAGE to application layer
    a. Port is always listening and HTTP is stateless
    b. RECIEVER Protocol
        i. accepts segments from network layer
        ii. re-assemble data blocks into messages
        iii. passes messages to sockets at application layer
    c. Demultiplexing
        i. delivers received segments to correct socket
            1. host recieves IP datagram
                a. datagram has source and destination IP (TCP) destination IP (UDP)
                    1. If UDP checks if checksum is correct
                b. datagram encapsulates one transport layer segment
                c. each segment has source and destination port number (TCP) destination port (UDP)
            2. host uses IP and port number to direct to correct socket
            3. Web servers have different sockets for each connecting client (non-persist different each request)
        ii. TCP Segment 
            1. Server acknowledges all correct segments received
            2. Calculate databytes received by subtracting 4 x header length from total byte count
            3. ACK number = number of the next byte expected
                i. ACK may contain data because TCP is full-duplex
                ii. If no data ACK then bogus number in sequence number field
            4. TCP scenario without errors
                i. Host sends 6 bytes message with first at SEQ #42 (Bogus ACK #79)
                ii. Server receives then replies with next expected 42 + 6 #48 ACK (no data so bogus SEQ #79)
                iii. Client receives ACK then sends 8 byte message at SEQ #48 (Bogus ACK #79)
                iv. Server sends ACK for next expected at #56 and bogus SEQ (#79)
            5. Receives and discards duplicates if ACK is delayed or lost
    d. With TCP server will create new socket to communicate with client using source port #'s

19. Server application layer - recieves HTTP MESSAGE
    a. RESPONSE method includes
        i. Status line
            1. protocol e.g. HTTP
            2. status code e.g. 200 or 404
            3. status phrase e.g. OK or Resource Not Found
        ii. Header lines
            1. Includes items like date, server, last-modified, accept-ranges, content length, ttl
            2. cookie header line
        iii. Data requested
            1. Includes HTML file or whatever
 
