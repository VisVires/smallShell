Common Commands
    pwd (print current dir)
    cd (Change directory)
    ls (list directories)
    touch = new file
    file = output file type
    cat = concat files or output file contents
    less = make ouput more manageable when in use q, g, G, page down and page up
    history = show all previous commands...navigate with !! or !-x
    cp = copy....way to use cp [filename] [destination] also -r(recursive for directories) and -i(interactive(watch overwrites)
    mv = move file somewhere or rename... way to use mv [filename] [newfilename] OR mv [filename][destination] other flags -i (iteractive) and -b (create backup with ~)
    mkdir = make new directory....aso can create multiple by using mkdir[dir1][dir2] also subdir by mkdir -p [directory path]
    rm [file] = remove....flags= -f, -i, -r also rmdir
    find = find file....how to use = find [directory] -name [file name]
    help = get help...you can use with standard bash commands as help [comand] or with flags [command] --help
    man = manuals
    whatis = short description of the command...how to use whatis [command]
    alias foobar=ls -la
    unalias foobar
    exit
    logout


TEXT MANIPULATION STUFF
    "echo >" causes replacement "echo >>" appends also no direct outputs to stout
    < redirects stdin
    2> write to stderr
    2>&1 write to stderr and stdout
    &> write to stderr and stdout
    2> /dev/null discard any stderr messages completely
    pipe = "|" gets stdout of one command and uses it as stdin of another........if "tee" is added it writes the stdout to mulitple outputs including the screen
    env = outputs enviromental varibles include the $PATH variable
    cut -c 5 sample.txt = outputs 5th char in each line
    cut -f 2 sample.txt = outputs 2nd field -f default field is separated by tabs
    cut -f 1 -d ";" sample.txt = outputs 1st field -f with new delimiter "d" which is ";"
    cut -c 5-10 sample.txt = outputs 5th char to 10th can also do -5 and 5- to get start and end
    "paste" is like cat merges lines in a file
    "paste" default delimiter is TABS..use it like paste -s [filename] or to change delimited paste -d   -s [filename]
    "paste" default delimiter is TABS..use it like paste -s [filename] or to change delimited paste -d / / -s [filename]
    "head" .. default shows first 10 lines can chnage number of lines with -n [number] [filename]
    "tail" .. default shows first 10 lines can chnage number of lines with tail -n [number] [filename] ... also -f (follow) flag will follow the file as it grows
    expand ... will change tabs to spaces
    unexpand ... will change group of spaces to tabs
    join ... join files by common file..done by first field by default but they have to be identical
    join ... if not identical you can use the following command join -1 2 -2 1 [fileName1] [fileName2] -1 and -2 denote the file and 1 and 2 denote the identical field to join by
    split [fileName] ... splits a file into different files, will split once they reach a 1000 line limit then name x**
    sort [fileName] ... sorts lines in a file ...FLAGS -r (reverse) -n (by numerical value)
    tr ... allows you to translate a set of chars into another set example: tr a-z A-Z translates from lower to uppercase
    uniq [fileName]... outputs unique lines only FLAGS -c (count occurances) -u (just get unique values) -d (just get duplicates (doesnt work if theyre not adjacent so sort first) 
    wc [fileName] ... shows count of lines, words and bytes FLAGS -l (lines) -w(words) -c(bytes)
    nl [fileName] output numbered lines on a file
    grep [characters] [fileName] ... allows you to search files for characters that match a certain pattern FLAGS -i (case insenstitive search) 
    grep [characters] [fileName] ... use regex as well like ".txt$" returns all files ending with .txt 
    grep [characters] [fileName] ... other grep FLAGS -E() -F()


ADVANCED TEXT-FU
    regex
    *    matches repeats
    .    matches at least one of any character
    ^    matches the beginning of a line
    $    matches the end of a line
    []  (brackets) enclose a set of chars to match
    [xyz]  (brackets) matches x,y, or z
    [c-n]  (brackets) matches c to n
    [B-Pk-y]  (brackets) matches B to P and k to y
    [a-z0-9]  (brackets) any lower case and any digit
    [^b-d]  (brackets) any char except from b-d
    [0-9][0-9][0-9]  (brackets) matches any area code
    \     escapes any special char
    \<...\>    marks word boundries

Text Editors
Vim
   Vim Search Patterns
   /[word] to serach then use n to go Forward or N to go back
   ?[word] to search backwards then use n to go Forward or N to go back
   Vim Navigation Patterns h or left, k or up, j or down, l or right
   Vim Append text: i - insert before cursor
   Vim Append text: O - insert on previous line
   Vim Append text: o - insert on next line
   Vim Append text: a - append after cursor
   Vim Append text: A - append at end of line
   Vim Edit: x - cut select or delete
   Vim Edit: dd - delete current line
   Vim Edit: y - yank or copy selected
   Vim Edit: yy - yank or copy entire line
   Vim Edit: p - paste copied before cursor
   Vim Save or Exit: :w - write or save file
   Vim Save or Exit: :q - quit vim
   Vim Save or Exit: :wq - save and quit vim
   Vim Save or Exit: :q! - quit vim without saving
   Vim Save or Exit: ZZ - save and quit
   Vim Save or Exit: u - undo last
   Vim Save or Exit: Ctrl-r - redo last
 
 
USER AND GROUP MANAGEMENT
UID     user id
GID     group id
root    most powerful user on the system
sudo    run command with root access
su    substitute users and open a root shell to run everything as root
visudo    opens /etc/sudoers file which lists who can run sudo
/etc/passwd    for finding out which users are mapped to which ID
/etc/passwd    shows list of user plus 1. username, 2. user password(stored in /etc/shadow file), 3. user ID (root has UID of 0), 4. Group ID 5. GECOS field(comma delimited comments), 6. Users home directory, 7. Users shell
/etc/passwd    contains human and other users (daemons that require different permissions)
/etc/passwd    can modify by hand with "vipw" tool
/etc/shadow    similar to /etc/passwd except in password field it will show an encrypted password
/etc/shadow    fields 1. username 2. encrypted password 3. date of last password change 4. minimum password age 5. maximum password age 6. password warning period 7. password inactivity period 8. account expiry date 9. reserved field for future
/etc/shadow    not only means fo authentication also PAM (pluggable authetication modules)
/etc/group   allows for different groups with different permissions 
/etc/group   fields 1. Group name 2. Group password optional ("*") is default 3. GID 4. list of users in group
User Management Tools   
adduser or useradd    adduser makes a home directory for the new user
sudo adduser bob    creates entry in /etc/passwd for bob, sets up a default group and an entry in /etc/shadow
sudo userdel bob    undoes useradd
passwd bob    change your or another users password (if root)
 
 
PERMISSIONS
File Permissions    4 parts
File Permissions    1. file type (first char)(- means regular file) 2. user permissions 3. group permissions 4. other permissions
File Permissions    r: readable w: writable x: executable -: empty
chmod     change permissions
chmod     add permissions to user, group or other = u+ g+ o+
chmod     remove permissions from user, group or other = u- g- o-
chmod     add mulitple ug+w
chmod     numerical change 4: read 2: write 1: execute so 755 = user all, group read and execute, other read and execute
chown     modify user = sudo chown [username] [filename]
chgrp     modify group = sudo chgrp [groupname] [filename]
chown     modify group and user = sudo chown [username]:[groupname] [filename]
umask     change default set of permissions by taking away
umask     example umask 022 takes away write permissions from group and other
umask     will change any new file but to persist you need to change startup file (.profile)
setuid    s permission bit at user x when set allows the users who launched the program to get the owners permission and execution permission when you run the passwd command you run it as root
setuid    modify symbolic... sudo chmod u+s [filename] 
setuid    modify numberical... sudo chmod 4755 [filename] SUID denoted by 4 and pre-pended
setuid    if "S" instead it does not have execute permissions
setuid    s permission bit at user x when set allows the group who launched the program to get the owners permission and execution permission
setuid    modify symbolic... sudo chmod g+s [filename] 
setuid    modify numerical... sudo chmod 2555 [filename] SUID denoted by 2 and pre-pended
setgid    if "S" instead it does not have execute permissions
Process Permissions    Three UIDs with each process
Process Permissions    1. effective user id (used to grant access rights)
Process Permissions    1. real user id (UID of user who launched process)
Process Permissions    3. saved user id (allows process to switch b/w effective and real user so that process is not always at elevated permissions)

Process Permissions    most of the time effective and real UID are the same but in cases such as passwd they will change
The Sticky Bit   sticks a file/directory so that only the owner or root can delete or modify it, useful for shared directories 
The Sticky Bit   special permission bit is at the end as t
The Sticky Bit   to update symbolic chmod +t [dir/filename]
The Sticky Bit   to update numeric chmod 1755 [dir/filename] (numerical representation is 1)
 
 
PROCESSES
Process are programs running on your machine and each is assigned a PID based on the order created 
ps command    gives PID TTY STAT (process status code) TIME(cpu usage time) CMD(name of executable/command)
ps aux    a: show all processes running u: show x: display all process without TTY field
ps FIELDS --- USER, PID, %CPU, %MEM, VSZ, RSS, TTY, STAT, START, TIME, COMMAND
top  gives real time info about processes running instead of a snapshot, good to watch resource usage
TTY    two types of terminals
TTY    terminal devices -- open with Ctrl+Alt+f1 close with Ctrl+Alt+f7 ... regular terminal device
TTY    pseudoterminal device --- what you normally use
TTY    process are normally linked to a terminal, some daemons always run in the background and are not bound to a terminal 
 Process is the system allocating memory, CPU, I/O to make a program run, a process is an instance of a running program
 The kernel is in charge of processes via the /proc filesystem
 Kernel makes sure processes get the right amount of resources and that when one ends the resources used are freed
 ps l     process long format shows the PPID (Parent process ID)
 init     PID of 1 big parent process
 Process   when a process starts it is first a clone of the parent then to run a new program it will call execve which destroys the original
 Process Termination      Process needs to tell the kernel why with signal/termination status
 Process Termination      Process needs parent process to approve of termination with wait call
 Process Termination      Orphan Process -- parent process dies before, process becomes child of init
 Process Termination      Zombie Process -- child terminates before parent calls wait, if it waits too long init will adopt and remove, else parent will reap processes once wait is called
 SIGNALS
    Notification that something has happened to kill, interrupt, suspend, indicate hardware or software issues from Kernel and communicate between processes
     SIGHUP or HUP or 1: Hangup
     SIGKILL or KILL or 9: kill
     SIGINT or INT or 2: interrupt
     SIGSEGV or SEGV or 11: seg fault
     SIGTERM or TERM or 15: Software termination
     SIGSTOP or STOP: Stop
     Numbers can vary so usually referred to by name
     some unblockable like SIGKILL
kill [PID]        calls SIGTERM to cleanly kill a process
kill -9 [PID]     run SIGKILL on process
niceness      determines which processes get priority, high means low priority, low or negative means high and lots of CPU use
top     NI column shows the niceness level of a process
nice -n 5 apt upgrade     how to use nice to change/set niceness/priority of a new process
renice 10 -p [PID]        how to set priority for an existing process
Process States(STAT column)
    R: Running
    S: Interuptible sleep: waiting for an event to complete, like terminal input
    D: Uninteruptible sleep: cannot be killed or interrupted with a signal
    Z: Zombie
    T: Stopped, process is suspended or stopped
/proc filesystem
     process information is stored here with subdirectories for each PID...how the kernel views the system
Job Control
&    after the command will run it in the background example: sleep [PID] &
jobs     shows all jobs sent to background with job id + by most recent and - by second most
bg    after halting process with CTRL-Z run bg to send process to background
fg %[JobID]     bring back inidicated background job or default most recent
kill %[JObID]   kill process with Job ID


PACKAGES
Software Distribution
    Use package manager to install software varieties of packages are .deb (Debian) .rpm (RedHat)
    People who write software are upstream providers
    People who maintai, review, manage and distribute are package maintainers
Package Repos
    Repos are central storage locations for packages
    Machine has a list of preapproved sources to get packages from in Debian the approved sources are in the /etc/apt/sources.list file
    Machine will look in the file and check for any source
Compression/Decompression
    gzip    program used to compress files in linux, ends with the .gz extension
    gzip [filename]    compress file
    gunzip [filename].gz    decompress file
    tar cvf [filename].tar [file1] [file2]    adds multiple files to an archive (gzip cant do this)
    tar cvf [filename].tar [file1] [file2]    FLAGS c- create  v-tell program to be verbose f- filename of the tar file comes after this    
    tar xvf [filename].tar     extract tar file FLAGS x- extract v-verbose f- file you want to extract
    if file [filename].tar.gz then you need to uncompress then unzip
    tar czf myfile.tar.gz    creates compressed tar file with FLAG z for gzip
    tar xzf file.tar    uncompress and unpack or eXtract all Zee FIles
    Other compression types exist like bzip2, zip, unzip, compress
Package Dependencies
    Normally other packages or shared libraries, if the dependecies aren't in the packages the package wont install
    RPM
        Red Hat based packages
        Install ---- rpm -i [packagename].rpm  FLAG -i means install
        Remove  ---- rpm -e [packagename].rpm  FLAG -e for erase
        List    ---- rpm -qa  FLAG -q for query, a for all
    Debian
        Install ---- dpkg -i [packagename].deb FLAG -i means install can also use --install
        Remove  ---- dpkg -r [packagename].deb FLAG -r means remove
        List    ---- dpkg -l FLAG -l means list
Management Systems
    RedHat = yum
        Install -- yum install [packagename]
        Remove -- yum erase [packagename]
        Update -- yup update
        Get info about package -- yum info [packagename]
    Debina = apt
        Install -- apt install [packagename]
        Remove -- apt remove [packagename]
        Update -- apt update; apt upgrade
        Get info about package -- apt show [packagename]
Compile Source Code
    If a package only comes in the form of source code you'll have to compile and install yourself
    1. get build tools
        sudo apt install build-essential
    2. extract contents of package
        tar -xzvf [packageName].tar.gz
    3. Check out README or INSTALL file
    4. run configure script ./configure
    5. run Makefile with make
    6. sudo make install -- actually installs the package copies correct files to correct locations 
    6.5. better to use: sudo checkinstall -- makes a deb file that you can install/uninstall easier
    7. sudo make unistall -- uninstalls the package

