JourneyMan Linux Stuff Part II with Devices/FIleSystem/Boot/Kernel/Init/Process Utilization and Logging

DEVICES
/dev directory    ls /dev shows devices and device drivers
DEVICE TYPES
    Columns when ls -l device type...Permissions, Owner, Group, Major Device Number, Minor Device Number, Time Stamp, Device Name
Type of device:     
    FLAGS c: character b: block p: pipe s: socket
Character Device    devices that transfer data one char at a time (psudo devices such as dev/null are these
Block Device    transfer data in large fixed sized blocks...harddrives, filesystems etc
Pipe Device    allow two or more process to communicate with each other, like char device but output is sent to a process instead of a device
Socket Device    facilitate communication between processes, like pipe but can communicate with several processes at once
Device Number/Characterization    8,0    8 = major 0= minor
Major Device Number    device driver that it used
Minor Device Number    Which unique device it is in this driver class 0 would represent the first
DEVICE NAMES
SCSI Devices --- Mass Storage uses the SCSI (scuzzy protocol) SMALL COMPUTER SYSTEM INTERFACE..protocol to allow communication between disks, printers, and other peripherals
SCSI Devices --- common SCSI device files start with sd.../dev/sda (first sd) && /dev/sdb (second harddisk) && /dev/sda3 (third partition of 1st hard disk)
Pseudo Devices --- not connected to system, most are character devices
Pseudo Devices --- examples: /dev/zero - accepts and discards all input, produces stream of NULL bytes
Pseudo Devices --- examples: /dev/null - accepts and discards all input, produces no output
Pseudo Devices --- examples: /dev/random - produces random numbers
PATA Devices --- in older systems, start with hd prefix
PATA Devices --- examples: /dev/hda - first disk  /dev/hdd2 - second partiion on 4th disk
sysfs --- virtual file system mounted to /sys directory
sysfs --- different than sys directory in that it is used to view info and manage devices
sysfs --- contains all info for all devices on your system like manufacturer, model, where it is plugged in, device state, hierarchy of devices
sysfs --- unlike /dev not device nodes so you dont interact with devies from /sys just manage devices
udev --- used to create device nodes via mknod /dev/sdb1 b 8 3
udev --- makes a block device with major 8 minor 3
udev --- to remove use rm on the device file
udev --- udev system dynamically creates and removes device files for us depending on whether they are connected
udev --- udevd is a daemon that is constantly looking for messages from the kernel about devices connected to the system
udev --- udevd parses info and match data to system rules defined in /etc/udev/rules.d then create device nodes and sybolic links
udevadm info --query=all --name=[deviceName] --- simple command to view device info
lsusb --- list usb devices
lspci --- list pci devices
lspci --- list SCSI devices
dd --- tool to covert and copy data
dd --- example: dd if=[1stdirectory] of=[2ndDirectory] bs=[num]
dd --- FLAGS if: input file of: output file bs: bytes transfered at a time denote size by using k for kilobyte m for megabyte etc....1024 = 1k count:number of blocks to copy




THE FILESYSTEM
Root Directory
    /root directory
    /bin --- ready to run programs (binaries), includes most basic commands like cd and ls
    /boot --- contains kernel boot loader files
    /dev --- device files
    /etc --- core system configuration directory, only holds config files and no binaries
    /home --- personal directories for users
    /lib --- holds library files that binaries can use
    /media --- used as attachment point for removable media like usb drives
    /mnt --- temporarily mounted filesystems
    /opt --- optional application software packages
    /proc --- info about currently running processes
    /root --- root users home directory
    /run --- info about the running system since last boot
    /sbin --- contains essential system binaries, can only be run by root
    /srv --- site specific data which are served by the system
    /tmp ---storage for temp files
    /usr --- does not contain user files, meant for installed software and utilities contains subdirectories for /usr/bin and /usr/local
    /var -- variable directory used for system logging, user tracking, caches etc,
File System Types
    VFS (virtual file system) abstraction layer allows for different types of filesystems to work with all applications
    Journeled vs Unjourneled file system --- journeled writes what you're going to be doing before the machine begins copying a file in a log file (journel) otherwise filesystem could be corrupted by system crash
    TYPES
        ext4 --- most current version of linux filesystems
             --- compatible with ext2 and ext3
             --- supports disk volumes up to 1 exabyte and file sizes up to 16 TB
             --- standard for linux
        Btrfs --- Better or Butter FS comes with snapshots, incremental backups and performance increase
        XFS  --- High performance journaling files system, great for system with large files
        NTFS and FAT --- Windows file systems
        HFS+ --- Macintosh filesystem
    df -T --- reports file system disk space usage and other details about the disk
Anatomy of a disk
    Parition Table --- table that shows how the disk is partitioned
                   --- two main tabe schemes MBR (Master Boot Record) and GPT (GUID Partition Table)
    Partition --- Non overlapping space on disk that can hold a filesystem or things like swap
    MBR --- Traditional Partition Table
        --- can have primary, extended and logical partitions
        --- has limit of four primary partitions
        --- can have one extended partition per disk on a primary partition
        --- supports up to 2 TB
    GPT --- GUID Partition Table is new STANDARD
        --- has only one type of partition and you can make many
        --- each has a globaly unique ID, GUID
        --- Used in conjunction with UEFI based booting
    Filesystem Structure
        Boot Block --- first few sectors of filesystem, contains info to boot for operating system, multiple partitions will have mutliple boot blocks
        Super Block -- Single block after boot block. Contains info about Size of inode table, size of logical blocks and size of filesystem
        Inode table -- database that manages files. Each file has a unique entry in the inode table
        Data Blocks - actual data for the files and directories
sudo parted -l ...  will show info about MBR file system
Disk Partitioning
    fdisk --- basic command line partitioning tool
    parted -- command line tool that supports both MBR and GPT partitioning
    gparted - GUI version of parted
    gdisk --- fdisk but only supports GPT
    To Perform Disk Partitioning on a USB Drive
    1.  sudo parted --- launch parted
    2.  select [deviceName] --- select device
    3.  parted print --- view current partition table, shows start and end points
    4.  mkpart primary [start point] [endpoint] - partition device
    5.  resize [device number] [start point] [end point]
Creating Filesystems
    On USB drive create a filesystem
    sudo mkfs -t ext4 /dev/sdb2 .... mkfs: makes the filesystem ext4: is the type /dev/sdb2: is where
    Filesystem needs to be on a newly partitioned disk or a repartitioned old one or else it will be corrupted
Mount and Unmount
    mount --- needs a mount point to view contents of filesystem
          --- sudo mount -t ext4 [drive location] [mount point] FLAG -t is the type of filesystem    unmount - sudo unmount [drive location/name] or sudo unmount [mount point]
          --- if device name changes after mounting it can be found via UUID which is the devices Universally Unique ID
    sudo blkid --- outputs universally unique ids for block devices
    Use to mount --- sudo mount UUID=[uuid] [mount point]
    --- if you need to automatically mount a filesystem at startup you'll want the UUID
/etc/fstab
    fstab --- short for file system table, holds permanent list of mounted filesystems
    Fields in fstab
        UUID
        Mount Point
        File System Type
        Options --- other mount options
        Dump --- used by the dump utility to decide when to make a backup, should defualt to 0
        Pass --- used by fsck to decide what order filesystems should be checked 0 means no
    To add an entry directly modify the file using the entry syntax on current page
swap
    what we use to allocate virtual memory to our system, if low on memory the system uses this partition
    Using a partition for swap space
        1. make sure we dont have anything on it
        2. run: mkswap /dev/sdb2 to initialize swap area
        3. run: swapon /dev/sdb2 to enable swap device
        4. If you want it to persist on start up add entry to /etc/fstab file. sw is the filesystem type 
        5. To remove: swapoff /dev/sdb2
Disk Usage
    df -h --- shows utilization of currently mounted filesystems FLAG -h makes it human readable
            - to show how much of the disk is free
    du -h --- shows disk usage of current directory you are in
            - to show how much of the disk is used
Filesystem Repair
    sudo fsck [filesystem name] --- used to check consistency of a filesystem and can repair it
    ---do this when you are in rescue disk or somewhere where you can access fs without it being mounted
Inodes
    Filesystem is made of all actual files and a database that manages those files
    Inode Table --- is the database
    Inode --- index node - one for every file and it describes everything
    Inode Table Entry
        -- file type
        -- owner
        -- group
        -- access permissions
        -- timestamps 
            -- mtime (last mod)
            -- ctime (last attribute change)
            -- atime (last access)
        -- number of hardlinks to the file
        -- size of the file
        -- number of blocks allocated to the file
        -- pointers to the data blocks of the file
    When are inodes created
        when a filesystem is, data storage depends on both the data and database
    df -i --- shows inodes left on the system
    Inode info
    --- to view inode number run ls -li its the first field and is assigned sequentially
        --- sometimes new ones are lower because old ones are deleted
    stat [directory] --- can show inode info too
    How do Inodes locate files
        --- inodes point to actual datablocks of files
        ---each contains 15 pointers, first 12 point directly to data blocks 13 points to a block containing more pointers, 14 points to a nested block of pointers and 15 points to another
        --- the reason for this is to keep the structure the same for each Inode
symlinks
    --- basically shortcuts like in Windows
    --- hardlinks are actually another file with a link to an inode
    --- symlinks are files that point to filenames
    --- you cannot reference a file in a different filesystem by its inode number because you cant have tow of the same inode numbers in a filesystem
    --- create hardlink
        --- ln [filename] [hardlinkname]
        --- changes to original file would be seen in hardlink but delete original and hardlink remains
        --- inode is only deleted when all hardlinks to inode are deleted
    --- create symlink
        --- ln -s [filename] [linkname]




BOOT THE SYSTEM
Boot Process
    1. BIOS - initializes hardware and makes sure with a power-on self test that all hardware is good to go
        Main job -- load up the the bootloaded
    2. Bootloader - loads kernel into memory and starts the kernel, most common is GRUB
    3. Kernel - when kernel is loaded it initializes devices and memory
        Main Job = load the init process
    4. Init - first process started, starts and stops essential service process on the system
BIOS
    Performs system integrity checks
    Main goal is find the bootloader
    Checks the MBR(master boot loader) or GPT this is in the first 512 bytes
    MBR loads another program which actually loads the boot loader
    If GPT it may use EFI or UEFI instead of BIOS
    UEFI 
        stores all information about startup on a .efi file which is stored in a partition called the EFI system partition on the hardware. It contains the bootloader...comes with many improvements from traditional BIOS
Bootloader
    Main Responsibilities
        --- Booting into an operating system, can be used to boot to non-linux
        --- select kernel to use
        --- specify kernel parameters
    To find the kernel you need to look at the kernel parameters
    To find it go into GRUB menu at startup and press e it shows:
        --- initrd - location of initial RAM disk
        --- BOOT_IMAGE - where the kernel image is located
        --- root - location of root filesystem, where init will be found by kernel
        --- ro - mounts the filesystem as read-only mode
        --- quiet - added so you don't see display messages going through during boot
        --- splash - lets the splash screen be shown
Kernel
    Initrd vs Initramfs
        Initrd - initial ram disk, originally used to hold essential modules the kernel needs to get the rest of the hardware because not all drivers are available to kernel at startup
        Initramfs - temporary root filesystem that is built into the kernel to load all necessary drivers for the real root filesystem
    Mounting the root filesystem
        Root partition is mounted in read only mode so that fsck can run and check for system integrity. Then it remounts the root filesystem in read-write mode. Then kernel locates init and executes it
Init Program
    Three Major Implementations
        --- System V init (sysv) --- starts and stops processes based on startup scripts. State of machine is denoted by runlevels and each runlevel starts or stops a machine in a different way
        --- Upstart
            Older Ubuntu init...uses the idea of jobs and events and works by starting jobs that perform certain actions in response to events
        --- Systemd
            new standard for init, goal oriented. YOu have a goal that you want to achieve and systemd tries to satisfy the goal's dependencies to complete the goal


THE KERNEL
Overview
    What is it? The core of the OS
    Linux OS has Three Levels of Abstraction
        1. Hardware - CPU, memory, hard disks, networking ports, etc...physical layer
        2. Kernel - Handles Process and Memory managment, device communication, system calls, sets up the filesystem.
                    - job is to talk to the hardware and make sure it does what we want our processes to do
        3. User Space - includes the shell, programs, graphics etc
Privilege Levels
    --- why have Kernel and User Abstraction Layers?
        - Both operate in different modes, kernel mode and user mode
        ---Kernel Mode
            - Kernel has access to the hardware
        ---User mode
            - very little access to hardware to prevent spyware access to your systems hardware
    ---Different Modes are called priviledge levels or protection rings
        - innermost ring has access to every level and can execute any instruction
    ---If we don't have access to the hardware how do we do anything to it if we are always in a different mode than kernel mode?
        -- System Calls
System Calls
---syscall provide user space processes a way to request the kernel to do something
---kernel makes certain available through the API which allow us to read, write, modify memory, modify the network etc
---system calls are fixed so you can't add new ones. The system already has a table for what calls exist
---each system call has a unique ID
---How do they work?
    -- code inside program contains a system call wrapper
    -- wrapper invokes system call which will execute a trap
    -- trap gets caught by system call handler the references in system call table
    -- it looks up the syscall number, finds it in a table based on syscall ID and executes the funcion you wanted to run
    -- once done it returns to user mode and will send a return status based on whether it was successful
    --to look at system calls for a command you can use the strace command
    strace ls --- checks system calls made by ls
Kernel Installation
    Can install multiple kernels on your system
    To see the kernel on your system use:
        uname -r  --- uname prints system info and FLAG -r will print out all of the kernel release version
    To get updated version use dist-upgrade
    sudo apt dist-upgrade
Kernel Location
    --- files for different kernel versions
        -- vmlinuz - actual linux kernel
        -- initrd - temp file system used before loading the kernel
        -- System.map - symbolic lookup table
        -- config - kernel configuration settings, if you are compiling your own kernel, you can set which modules can be loaded
    --- if /boot runs out of space you can delete old versions of theses files or use a package manager, just don't delete current kernel while doing maintenance
Kernel Modules
---Pieces of code that can be loaded and unloaded into the kernel on demand
---allow us to extend the functionality of the kernel without actually adding to the core kernel code
lsmod --- list of currently loaded modules
sudo modprobe bluetooth --- loads bluetooth module 
    -- modprobe tries the module from /lib/modules/(kernel version)/kernel/drivers
sudo modeprobe -r bluetooth    -- remove a module
To load modules during system boot modify the /etc/modprobe.d directory and add a config file

Make sure a module doesn't load on bootup by adding a configuration file that says 
    blacklist [moduleName]



INIT
    Main purpose: Start and stop essential system processes
    Three Major Implementations
        1. System V
        2. Upstart
        3. systemd
System V Overview
    - Most traditional version of init
    - Pronounced System 5
    - How do you know
        - if you have /etc/inittab file
    -Starts and stops processes sequentially
    -Pros of using:
        - easy to solve dependencies
    -cons:
        - performance isn't great because usually one thing is starting or stopping at a time
    -state of the machine is defined by run levels which are set from 0 to 6
        0 : shutdown
        1 : single user mode
        2 : multiuser mode without networking
        3 : multiuser mode with networking
        4 : unused
        5 : multiuser mode with networking and GUI
        6 : Reboot
    - On startup system looks at runlevel then executes script in that configuration
        - scripts are loacted in /etc/rc.d/rc[runlevelNumber].d/ or /etc/init,d
        - scripts that start with S or K will run on startup and shutdown
        - like: K10updates K80openvpn 
            - kills update services and openvpn
    - System 5 is getting replaced
System V Service
    - Command Line Tools
    service --status-all ... list services
    sudo service networking start ... start a service
    sudo service networking stop ... stop a service
    sudo service networking restart .. restart a service
    -- can be used with Upstart services too
Upstart Overview
    - Developed by Canonical, was on Ubuntu, Ubuntu uses systemd now
    - Created to improve strict startup processes, blocking of tasks and other system V issues
    - How do you know
        - if you have /usr/share/upstart directory
    - Jobs are the actions upstart performs and events are messages that are received from other processes to trigger jobs
    - To see list of jobs
        ls /etc/init
    - Inside jobs it'll include when to start and stop
        - example
            start on runlevel [235]
            stop on runlevel [0]
            - means start at 2, 3, or 5 and stop on 0
    - Way UpStart works
        1. First, loads up the job config from /etc/init
        2. Once startup occurs run jobs triggered by that event
        3. These jobs will make new events and then those events will trigger more jobs
        4. Upstart continues until it completes all necessary jobs
Upstart JObs
    -Commands in an Upstart System
    initctl list -- view jobs with format: [job name][goal of job]/[current status]
    initctl status [job name] -- view specific job with same format as abovr
    sudo initctl start [job name] - manually start a job
    sudo initctl stop [job name] - manually stop a job
    sudo initctl restart [job name] - restart networking
    sudo initctl emit [some_event] - manually emit an event
Systemd Overview
    - Emerging standard for init
    - How do you know?
        - /usr/lib/systemd directory
    - uses goals to get system up and running
        - you have a target that you want to achieve and this target also has dependencies that we need to achieve
    - flexible and robust does not follow a strict sequence
    - What happens during boot
        1. Systemd loads its config files located in /etc/systemd/system or .usr/lib/systemd/system
        2. systemd Determines boot goal which is default.target
        3. systemd figures out dependencies of boot target and activates them
    - Boots into different targets
        - poweroff.target - shutdown system
        - rescue.target - singue user mode
        - multi-user.target - multiuser with networking
        - graphical.target - multiuser with networking and GUI
        - reboot.target - restart
    - default boot goal of default.target is normally graphical.target
    - Main object systemd works with are known as units
    - systemd can do more than start and stop services it can also mount filesystems, monitor network sockets etc.
    - Common units
        - Service units - services we've been starting and stopping
            -end in .service
        - Mount units - mount filesystems, 
            - end in .mount
        - Target units - group other units
            - end in .target
    - once we activate one one everything below it gets activated too
Systemd Goals
    Unit file overview:
        Starts with 
        [Unit]
            give unit file adescription and control ordering of when to activate the unit
        [Service]
            start, stops and reloads a service
        [Install]
            used for dependency
    Commands
        systemctl list-units : list units
        systemctl status [unit name].service : view status of unit
        sudo systemctl start [unit name].service : start a service
        sudo systemctl stop [unit name].service : stop a service
        sudo systemctl restart [unit name].service : restart a service
        sudo systemctl enable [unit name].service : enable a unit
        sudo systemctl disable [unit name].service : disable a unit
Power States
    -To shutdown the system
    sudo shutdown -h now 
        - must speciify a time when you want to shutdown
    sudo shutdown -h +2
        - shut down in 2 minutes
    sudo shutdown -r now
        - restart with shutdown command
    sudo reboot
        - reboot command



PROCESS UTILIZATION
Tracking Processes
    top Command
        - shows real time system utilization by our processes
        - fields
            1st Line
                1. current time
                2. how long system has been running
                3. how many users are logged on
                4. system load average
            2nd line
                Tasks running, sleeping, stopped and zombied
            3rd line
                CPU info
                1. us : user CPU time - percentage of cpu time spent running users' processes that aren't niced
                2. sy : system CPU time - percentage of CPU time spemt running the kernel
                3. ni : nice CPU time - percentage of CPU time spent on niced processes
                4. id : CPU idle time - percentage of CPU time that is spent idle
                5. wa : I/O wait - percentage of CPU time spent waiting for I/O
                6. hi : hardware interrupts - percentage of CPU time spent serving hardware interrupts
                7. si : software interrupts - percentage of CPU time spent serving software interrupts
                8. st : steal time - if running virtual machines this is CPU time stolen from you for other tasks
            4th line and 5th line: Memory Usage and Swap Usage
            Processes List that are Currently in Use
                1. PID : process id
                2. USER : user that is owner of process
                3. PR: priority of process
                4. NI: the nice value
                5. VIRT: virtual memory used by the process
                6. RES: physcial memory used from the process
                7. SHR: shared memory of the process
                8. S: indicates process STAT
                9. %CPU: percent of CPU used by process
                10. %MEM: percentage of RAM used by process
                11. TIME+: time of activity of this process
                12: COMMAND: name of the process
    You can specify process ID of a certain process
    top -p 1
Lsof and fuser
    - Tools to find out what is using what
    lsof
        - to see what is in use by a process 
        - "list open files"
        - shows all open files and their processes
    fuser -v (verbose)
        - "file user"
        - shows information about the process that is using the file or the file user
Process Threads
    - All processes have at least one thread
    - Processes operate with their own isolated system resources
    - Threads can share the resources among each other
        - Example
            - Chrome and LibreOffice Writer are separate processes
            - Automatically Saving and Editing are parallel "lightweight processes" known as threads
    ps m
        - view process threads
        - Processes denoted with PID "--" underneath are the threads
        - single threaded process looks like
            2207 pts/2  - 0:01 bash
             - -       Ss 0;01 -
CPU Monitoring
    uptime command
        -Load Average --- represents the average CPU load in 1, 5 and 15 minute intervals
        - CPU load --- average number of processes that are waiting to be executed by the CPU
        - Each core is a lane in traffic
        - To view number of cores:
            cat /proc/cpuinfo
I/O Monitoring
    iostat command
        - first part : CPU Information
            -%user - percent CPU util at user/application level
            -%nice - percent CPU util while executing with nice priority, user CPU with nice
            -%system - percent CPU util while executing at system/kernel level
            -%iowait - percent CPU time where idel during outstanding disk I/O request
            -%steal - % of time spent in involuntary wait by virutal CPU or CPUs while hypervisor was servicing another virtual processer
            -%idel - percentage of time CPU were without outstanding disk I/O request
        -second part
            - tps - number of transfers per second issued to the device-- transfer is an I/O request
            -kB_read/s - indicate amount of data read from the device expressed in kb per second
            -kB wrtn/s - indicate amount of data written to the device in kB per second
            -kB_read - total number of kB read
            -kB_wrtn - total number of kB written
Memory Monitoring
    vmstat command
    -Fields
        procs
            - r -- number of processes for run time
            - b -- number of processes in uniterruptible sleep
        memory
            -swpd -- amounr of virtual memory used
            -free -- amount of free memory
            -buff -- amount of memory user as buffers
            -cache - amount of memory used as cache
        swap
            -si -- amount of memory swapped in from disk
            -so -- amount of memory swapped out to disk
        io
            -bi -- amount of blocks recieved in from a block device
            -bo -- amount of blocks sent out to a block device
        system
            -in -- number of interrupts per second
            -cs -- number of context switches per second
        cpu
            -us -- time spent in user time
            -sy -- time spent in kernel time
            -id -- time spent idle
            -wa -- time spent waiting for IO
Continuous Monitoring
        sar command
            - tool used to do historical analysis on the system
            - install using: sudo apt install sysstat
            - using sar
                sudo sar -q  -- list the details from the start of the day
                sudo sar -r  -- list the details of memory usage from start of the day
                sudo sar -P  -- list details of CPU usage
                To see a different day:
                    sar -q /var/log/sysstat/sa[day you want to view]
Cron Jobs
    cron
        - tool that allows you to schedule a time to run a specific script
        -fields
            - Minute (0 -59)
            - Hour (0-23)
            - Day of the month (1-31)
            - Month (1-12)
            - Day of the week - (0-7) 0 and 7 are Sunday
        -asterisk means to match every value
        - to run, edit the crontab file
        crontab -e


LOGGING
System Logging
    -Logs are a human readable journal of events that are happening on the system
    -kept in /var directory
    syslog
        - sends info to system logger
        - components
            - daemon running called syslogd or rsyslogd 
                -- waits for event messages to occur and filter the ones it wants you to know about, will send to file, console or do nothing
        - log format should include a timestamp and event details
        - output can be found at /var/log/syslog
        - to find out what files are maintained look at config details in /etc/syslog.d
        - rules to log files are denoted by the selector on the left and action on the right
            -action says where to send log info like a file or console
        - example log
            logger -s Hello
General Logging
    Two General Log Files 
        /var/log/messages
            - all non-critical and non-debug messages including those from bootup, auth, cron daemon, etc.
       /var/log/syslog
            - everything except auth messages
            - useful for debugging errors on the machine
Kernel Logging
    /var/log/dmesg
        - shows info about hardware dirvers, kernel info and status during bootup and more
        - reset every boot
        - can view using
            dmesg command
    /var/logkern.log
        - logs the kernel info and events on your system
Authentication Logging
    - if you're having issues logging in check:
    /var/log/auth.log
    - contains system auth logs like user login and authentication method used
Managing Log Files
    logrotate 
        - utility that does log management for us. Config file that allows us to specify 
            - how many logs
            - what logs to keep
            - how to compress to save space
        - run out of cron once a day
        - found in 
            /etc/logrotate.d




